rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Allow any authenticated user to read any user document (needed for profile functionality)
    match /users/{userId} {
      allow read: if request.auth != null;
      // Allow users to write to their own documents or admins to write to any user
      allow write: if request.auth != null && (
        request.auth.uid == userId || 
        // Check for admin role (ROLE_ADMIN = 2)
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 2
      );
    }
    
    // Allow any authenticated user to read all appointments (needed for dashboard functionality)
    match /appointments/{appointmentId} {
      allow read: if request.auth != null;
      // Allow users to write to appointments they're involved in or admins to write to any
      allow write: if request.auth != null && (
        request.auth.uid == resource.data.patientId || 
        request.auth.uid == resource.data.doctorId || 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 2
      );
      // Allow appointment creation
      allow create: if request.auth != null;
    }
    
    // Allow authenticated users to read and write notifications
    match /notifications/{notificationId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null;
    }
    
    // Add rules for medical records
    match /medicalRecords/{recordId} {
      // Patients can read their own records, doctors can read records they created, admins can read all
      allow read: if request.auth != null && (
        // For individual document reads
        request.auth.uid == resource.data.patientId || 
        request.auth.uid == resource.data.doctorId || 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 2
      );
      
      // Special rule for list queries when a user is either:
      // 1. A patient looking at their own records (where patientId == user.uid)
      // 2. A doctor (role == 1) looking at a patient's records
      // 3. An admin (role == 2) looking at any records
      allow list: if request.auth != null && (
        // Patients can list their own records
        (request.query.limit <= 100 && 
          request.query.filters[0].field == "patientId" && 
          request.query.filters[0].op == "==" && 
          request.query.filters[0].value == request.auth.uid) ||
        // Doctors can list their patients' records or records they created
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 1 ||
        // Admins can list any records
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 2
      );
      
      // Only doctors and admins can create records
      allow create: if request.auth != null && (
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 1 || 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 2
      );
      
      // Only the doctor who created the record or admins can update/delete it
      allow update, delete: if request.auth != null && (
        request.auth.uid == resource.data.doctorId || 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 2
      );
    }
    
    // Allow admins to write to adminActions collection
    match /adminActions/{actionId} {
      allow read: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 2;
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 2;
    }
    
    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
}